
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model users
 * 
 */
export type users = {
  id: bigint
  name: string
  email: string
  email_verified_at: Date | null
  password: string
  phone: string
  address: string
  city: string
  state: string
  country: string
  zip: string
  age: number
  company: string | null
  employee_id: string | null
  marketing: boolean
  user_type: users_user_type
  created_at: Date | null
  updated_at: Date | null
}

/**
 * Model shifts
 * 
 */
export type shifts = {
  id: bigint
  start_time: Date
  end_time: Date
  created_at: Date | null
  updated_at: Date | null
  max_volunteers: number
  work_type: shifts_work_type
  location: string
  description: string
}

/**
 * Model jobs
 * 
 */
export type jobs = {
  user_id: bigint
  shift_id: bigint
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const shifts_work_type: {
  carpentry: 'carpentry',
  electrical: 'electrical',
  plumbing: 'plumbing',
  painting: 'painting',
  cleaning: 'cleaning',
  administrative: 'administrative'
};

export type shifts_work_type = (typeof shifts_work_type)[keyof typeof shifts_work_type]


export const users_user_type: {
  admin: 'admin',
  volunteer: 'volunteer',
  coordinator: 'coordinator'
};

export type users_user_type = (typeof users_user_type)[keyof typeof users_user_type]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>;

  $transaction<R>(fn: (prisma: Prisma.TransactionClient) => Promise<R>, options?: {maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel}): Promise<R>;

      /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<GlobalReject>;

  /**
   * `prisma.shifts`: Exposes CRUD operations for the **shifts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Shifts
    * const shifts = await prisma.shifts.findMany()
    * ```
    */
  get shifts(): Prisma.shiftsDelegate<GlobalReject>;

  /**
   * `prisma.jobs`: Exposes CRUD operations for the **jobs** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Jobs
    * const jobs = await prisma.jobs.findMany()
    * ```
    */
  get jobs(): Prisma.jobsDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.8.0
   * Query Engine version: d6e67a83f971b175a593ccc12e15c4a757f93ffe
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    users: 'users',
    shifts: 'shifts',
    jobs: 'jobs'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */


  export type UsersCountOutputType = {
    jobs: number
  }

  export type UsersCountOutputTypeSelect = {
    jobs?: boolean
  }

  export type UsersCountOutputTypeGetPayload<S extends boolean | null | undefined | UsersCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UsersCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UsersCountOutputTypeArgs)
    ? UsersCountOutputType 
    : S extends { select: any } & (UsersCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UsersCountOutputType ? UsersCountOutputType[P] : never
  } 
      : UsersCountOutputType




  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     * 
    **/
    select?: UsersCountOutputTypeSelect | null
  }



  /**
   * Count Type ShiftsCountOutputType
   */


  export type ShiftsCountOutputType = {
    jobs: number
  }

  export type ShiftsCountOutputTypeSelect = {
    jobs?: boolean
  }

  export type ShiftsCountOutputTypeGetPayload<S extends boolean | null | undefined | ShiftsCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ShiftsCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ShiftsCountOutputTypeArgs)
    ? ShiftsCountOutputType 
    : S extends { select: any } & (ShiftsCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ShiftsCountOutputType ? ShiftsCountOutputType[P] : never
  } 
      : ShiftsCountOutputType




  // Custom InputTypes

  /**
   * ShiftsCountOutputType without action
   */
  export type ShiftsCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ShiftsCountOutputType
     * 
    **/
    select?: ShiftsCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model users
   */


  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    id: number | null
    age: number | null
  }

  export type UsersSumAggregateOutputType = {
    id: bigint | null
    age: number | null
  }

  export type UsersMinAggregateOutputType = {
    id: bigint | null
    name: string | null
    email: string | null
    email_verified_at: Date | null
    password: string | null
    phone: string | null
    address: string | null
    city: string | null
    state: string | null
    country: string | null
    zip: string | null
    age: number | null
    company: string | null
    employee_id: string | null
    marketing: boolean | null
    user_type: users_user_type | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersMaxAggregateOutputType = {
    id: bigint | null
    name: string | null
    email: string | null
    email_verified_at: Date | null
    password: string | null
    phone: string | null
    address: string | null
    city: string | null
    state: string | null
    country: string | null
    zip: string | null
    age: number | null
    company: string | null
    employee_id: string | null
    marketing: boolean | null
    user_type: users_user_type | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    name: number
    email: number
    email_verified_at: number
    password: number
    phone: number
    address: number
    city: number
    state: number
    country: number
    zip: number
    age: number
    company: number
    employee_id: number
    marketing: number
    user_type: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    id?: true
    age?: true
  }

  export type UsersSumAggregateInputType = {
    id?: true
    age?: true
  }

  export type UsersMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    email_verified_at?: true
    password?: true
    phone?: true
    address?: true
    city?: true
    state?: true
    country?: true
    zip?: true
    age?: true
    company?: true
    employee_id?: true
    marketing?: true
    user_type?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    email_verified_at?: true
    password?: true
    phone?: true
    address?: true
    city?: true
    state?: true
    country?: true
    zip?: true
    age?: true
    company?: true
    employee_id?: true
    marketing?: true
    user_type?: true
    created_at?: true
    updated_at?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    email_verified_at?: true
    password?: true
    phone?: true
    address?: true
    city?: true
    state?: true
    country?: true
    zip?: true
    age?: true
    company?: true
    employee_id?: true
    marketing?: true
    user_type?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type UsersAggregateArgs = {
    /**
     * Filter which users to aggregate.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type UsersGroupByArgs = {
    where?: usersWhereInput
    orderBy?: Enumerable<usersOrderByWithAggregationInput>
    by: Array<UsersScalarFieldEnum>
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }


  export type UsersGroupByOutputType = {
    id: bigint
    name: string
    email: string
    email_verified_at: Date | null
    password: string
    phone: string
    address: string
    city: string
    state: string
    country: string
    zip: string
    age: number
    company: string | null
    employee_id: string | null
    marketing: boolean
    user_type: users_user_type
    created_at: Date | null
    updated_at: Date | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends UsersGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    email_verified_at?: boolean
    password?: boolean
    phone?: boolean
    address?: boolean
    city?: boolean
    state?: boolean
    country?: boolean
    zip?: boolean
    age?: boolean
    company?: boolean
    employee_id?: boolean
    marketing?: boolean
    user_type?: boolean
    created_at?: boolean
    updated_at?: boolean
    jobs?: boolean | usersJobsArgs
    _count?: boolean | UsersCountOutputTypeArgs
  }


  export type usersInclude = {
    jobs?: boolean | usersJobsArgs
    _count?: boolean | UsersCountOutputTypeArgs
  } 

  export type usersGetPayload<S extends boolean | null | undefined | usersArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? users :
    S extends undefined ? never :
    S extends { include: any } & (usersArgs | usersFindManyArgs)
    ? users  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'jobs' ? Array < jobsGetPayload<S['include'][P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (usersArgs | usersFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'jobs' ? Array < jobsGetPayload<S['select'][P]>>  :
        P extends '_count' ? UsersCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof users ? users[P] : never
  } 
      : users


  type usersCountArgs = Merge<
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }
  >

  export interface usersDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usersFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'users'> extends True ? Prisma__usersClient<usersGetPayload<T>> : Prisma__usersClient<usersGetPayload<T> | null, null>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usersFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'users'> extends True ? Prisma__usersClient<usersGetPayload<T>> : Prisma__usersClient<usersGetPayload<T> | null, null>

    /**
     * Find the first Users that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs>(
      args?: SelectSubset<T, usersFindManyArgs>
    ): PrismaPromise<Array<usersGetPayload<T>>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs>(
      args: SelectSubset<T, usersCreateArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs>(
      args?: SelectSubset<T, usersCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs>(
      args: SelectSubset<T, usersDeleteArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs>(
      args: SelectSubset<T, usersUpdateArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs>(
      args?: SelectSubset<T, usersDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs>(
      args: SelectSubset<T, usersUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs>(
      args: SelectSubset<T, usersUpsertArgs>
    ): Prisma__usersClient<usersGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsersGroupByArgs['orderBy'] }
        : { orderBy?: UsersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usersClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    jobs<T extends usersJobsArgs= {}>(args?: Subset<T, usersJobsArgs>): PrismaPromise<Array<jobsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * users base type for findUnique actions
   */
  export type usersFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where: usersWhereUniqueInput
  }

  /**
   * users findUnique
   */
  export interface usersFindUniqueArgs extends usersFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users base type for findFirst actions
   */
  export type usersFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }

  /**
   * users findFirst
   */
  export interface usersFindFirstArgs extends usersFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     * 
    **/
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter, which users to fetch.
     * 
    **/
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     * 
    **/
    orderBy?: Enumerable<usersOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     * 
    **/
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsersScalarFieldEnum>
  }


  /**
   * users create
   */
  export type usersCreateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to create a users.
     * 
    **/
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs = {
    /**
     * The data used to create many users.
     * 
    **/
    data: Enumerable<usersCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * users update
   */
  export type usersUpdateArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The data needed to update a users.
     * 
    **/
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs = {
    /**
     * The data used to update users.
     * 
    **/
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     * 
    **/
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * The filter to search for the users to update in case it exists.
     * 
    **/
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     * 
    **/
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
    /**
     * Filter which users to delete.
     * 
    **/
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs = {
    /**
     * Filter which users to delete
     * 
    **/
    where?: usersWhereInput
  }


  /**
   * users.jobs
   */
  export type usersJobsArgs = {
    /**
     * Select specific fields to fetch from the jobs
     * 
    **/
    select?: jobsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: jobsInclude | null
    where?: jobsWhereInput
    orderBy?: Enumerable<jobsOrderByWithRelationInput>
    cursor?: jobsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<JobsScalarFieldEnum>
  }


  /**
   * users without action
   */
  export type usersArgs = {
    /**
     * Select specific fields to fetch from the users
     * 
    **/
    select?: usersSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usersInclude | null
  }



  /**
   * Model shifts
   */


  export type AggregateShifts = {
    _count: ShiftsCountAggregateOutputType | null
    _avg: ShiftsAvgAggregateOutputType | null
    _sum: ShiftsSumAggregateOutputType | null
    _min: ShiftsMinAggregateOutputType | null
    _max: ShiftsMaxAggregateOutputType | null
  }

  export type ShiftsAvgAggregateOutputType = {
    id: number | null
    max_volunteers: number | null
  }

  export type ShiftsSumAggregateOutputType = {
    id: bigint | null
    max_volunteers: number | null
  }

  export type ShiftsMinAggregateOutputType = {
    id: bigint | null
    start_time: Date | null
    end_time: Date | null
    created_at: Date | null
    updated_at: Date | null
    max_volunteers: number | null
    work_type: shifts_work_type | null
    location: string | null
    description: string | null
  }

  export type ShiftsMaxAggregateOutputType = {
    id: bigint | null
    start_time: Date | null
    end_time: Date | null
    created_at: Date | null
    updated_at: Date | null
    max_volunteers: number | null
    work_type: shifts_work_type | null
    location: string | null
    description: string | null
  }

  export type ShiftsCountAggregateOutputType = {
    id: number
    start_time: number
    end_time: number
    created_at: number
    updated_at: number
    max_volunteers: number
    work_type: number
    location: number
    description: number
    _all: number
  }


  export type ShiftsAvgAggregateInputType = {
    id?: true
    max_volunteers?: true
  }

  export type ShiftsSumAggregateInputType = {
    id?: true
    max_volunteers?: true
  }

  export type ShiftsMinAggregateInputType = {
    id?: true
    start_time?: true
    end_time?: true
    created_at?: true
    updated_at?: true
    max_volunteers?: true
    work_type?: true
    location?: true
    description?: true
  }

  export type ShiftsMaxAggregateInputType = {
    id?: true
    start_time?: true
    end_time?: true
    created_at?: true
    updated_at?: true
    max_volunteers?: true
    work_type?: true
    location?: true
    description?: true
  }

  export type ShiftsCountAggregateInputType = {
    id?: true
    start_time?: true
    end_time?: true
    created_at?: true
    updated_at?: true
    max_volunteers?: true
    work_type?: true
    location?: true
    description?: true
    _all?: true
  }

  export type ShiftsAggregateArgs = {
    /**
     * Filter which shifts to aggregate.
     * 
    **/
    where?: shiftsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shifts to fetch.
     * 
    **/
    orderBy?: Enumerable<shiftsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: shiftsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shifts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shifts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned shifts
    **/
    _count?: true | ShiftsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ShiftsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ShiftsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ShiftsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ShiftsMaxAggregateInputType
  }

  export type GetShiftsAggregateType<T extends ShiftsAggregateArgs> = {
        [P in keyof T & keyof AggregateShifts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateShifts[P]>
      : GetScalarType<T[P], AggregateShifts[P]>
  }




  export type ShiftsGroupByArgs = {
    where?: shiftsWhereInput
    orderBy?: Enumerable<shiftsOrderByWithAggregationInput>
    by: Array<ShiftsScalarFieldEnum>
    having?: shiftsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ShiftsCountAggregateInputType | true
    _avg?: ShiftsAvgAggregateInputType
    _sum?: ShiftsSumAggregateInputType
    _min?: ShiftsMinAggregateInputType
    _max?: ShiftsMaxAggregateInputType
  }


  export type ShiftsGroupByOutputType = {
    id: bigint
    start_time: Date
    end_time: Date
    created_at: Date | null
    updated_at: Date | null
    max_volunteers: number
    work_type: shifts_work_type
    location: string
    description: string
    _count: ShiftsCountAggregateOutputType | null
    _avg: ShiftsAvgAggregateOutputType | null
    _sum: ShiftsSumAggregateOutputType | null
    _min: ShiftsMinAggregateOutputType | null
    _max: ShiftsMaxAggregateOutputType | null
  }

  type GetShiftsGroupByPayload<T extends ShiftsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ShiftsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ShiftsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ShiftsGroupByOutputType[P]>
            : GetScalarType<T[P], ShiftsGroupByOutputType[P]>
        }
      >
    >


  export type shiftsSelect = {
    id?: boolean
    start_time?: boolean
    end_time?: boolean
    created_at?: boolean
    updated_at?: boolean
    max_volunteers?: boolean
    work_type?: boolean
    location?: boolean
    description?: boolean
    jobs?: boolean | shiftsJobsArgs
    _count?: boolean | ShiftsCountOutputTypeArgs
  }


  export type shiftsInclude = {
    jobs?: boolean | shiftsJobsArgs
    _count?: boolean | ShiftsCountOutputTypeArgs
  } 

  export type shiftsGetPayload<S extends boolean | null | undefined | shiftsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? shifts :
    S extends undefined ? never :
    S extends { include: any } & (shiftsArgs | shiftsFindManyArgs)
    ? shifts  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'jobs' ? Array < jobsGetPayload<S['include'][P]>>  :
        P extends '_count' ? ShiftsCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (shiftsArgs | shiftsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'jobs' ? Array < jobsGetPayload<S['select'][P]>>  :
        P extends '_count' ? ShiftsCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof shifts ? shifts[P] : never
  } 
      : shifts


  type shiftsCountArgs = Merge<
    Omit<shiftsFindManyArgs, 'select' | 'include'> & {
      select?: ShiftsCountAggregateInputType | true
    }
  >

  export interface shiftsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Shifts that matches the filter.
     * @param {shiftsFindUniqueArgs} args - Arguments to find a Shifts
     * @example
     * // Get one Shifts
     * const shifts = await prisma.shifts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends shiftsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, shiftsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'shifts'> extends True ? Prisma__shiftsClient<shiftsGetPayload<T>> : Prisma__shiftsClient<shiftsGetPayload<T> | null, null>

    /**
     * Find one Shifts that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {shiftsFindUniqueOrThrowArgs} args - Arguments to find a Shifts
     * @example
     * // Get one Shifts
     * const shifts = await prisma.shifts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends shiftsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, shiftsFindUniqueOrThrowArgs>
    ): Prisma__shiftsClient<shiftsGetPayload<T>>

    /**
     * Find the first Shifts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shiftsFindFirstArgs} args - Arguments to find a Shifts
     * @example
     * // Get one Shifts
     * const shifts = await prisma.shifts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends shiftsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, shiftsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'shifts'> extends True ? Prisma__shiftsClient<shiftsGetPayload<T>> : Prisma__shiftsClient<shiftsGetPayload<T> | null, null>

    /**
     * Find the first Shifts that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shiftsFindFirstOrThrowArgs} args - Arguments to find a Shifts
     * @example
     * // Get one Shifts
     * const shifts = await prisma.shifts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends shiftsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, shiftsFindFirstOrThrowArgs>
    ): Prisma__shiftsClient<shiftsGetPayload<T>>

    /**
     * Find zero or more Shifts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shiftsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Shifts
     * const shifts = await prisma.shifts.findMany()
     * 
     * // Get first 10 Shifts
     * const shifts = await prisma.shifts.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const shiftsWithIdOnly = await prisma.shifts.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends shiftsFindManyArgs>(
      args?: SelectSubset<T, shiftsFindManyArgs>
    ): PrismaPromise<Array<shiftsGetPayload<T>>>

    /**
     * Create a Shifts.
     * @param {shiftsCreateArgs} args - Arguments to create a Shifts.
     * @example
     * // Create one Shifts
     * const Shifts = await prisma.shifts.create({
     *   data: {
     *     // ... data to create a Shifts
     *   }
     * })
     * 
    **/
    create<T extends shiftsCreateArgs>(
      args: SelectSubset<T, shiftsCreateArgs>
    ): Prisma__shiftsClient<shiftsGetPayload<T>>

    /**
     * Create many Shifts.
     *     @param {shiftsCreateManyArgs} args - Arguments to create many Shifts.
     *     @example
     *     // Create many Shifts
     *     const shifts = await prisma.shifts.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends shiftsCreateManyArgs>(
      args?: SelectSubset<T, shiftsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Shifts.
     * @param {shiftsDeleteArgs} args - Arguments to delete one Shifts.
     * @example
     * // Delete one Shifts
     * const Shifts = await prisma.shifts.delete({
     *   where: {
     *     // ... filter to delete one Shifts
     *   }
     * })
     * 
    **/
    delete<T extends shiftsDeleteArgs>(
      args: SelectSubset<T, shiftsDeleteArgs>
    ): Prisma__shiftsClient<shiftsGetPayload<T>>

    /**
     * Update one Shifts.
     * @param {shiftsUpdateArgs} args - Arguments to update one Shifts.
     * @example
     * // Update one Shifts
     * const shifts = await prisma.shifts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends shiftsUpdateArgs>(
      args: SelectSubset<T, shiftsUpdateArgs>
    ): Prisma__shiftsClient<shiftsGetPayload<T>>

    /**
     * Delete zero or more Shifts.
     * @param {shiftsDeleteManyArgs} args - Arguments to filter Shifts to delete.
     * @example
     * // Delete a few Shifts
     * const { count } = await prisma.shifts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends shiftsDeleteManyArgs>(
      args?: SelectSubset<T, shiftsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Shifts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shiftsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Shifts
     * const shifts = await prisma.shifts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends shiftsUpdateManyArgs>(
      args: SelectSubset<T, shiftsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Shifts.
     * @param {shiftsUpsertArgs} args - Arguments to update or create a Shifts.
     * @example
     * // Update or create a Shifts
     * const shifts = await prisma.shifts.upsert({
     *   create: {
     *     // ... data to create a Shifts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Shifts we want to update
     *   }
     * })
    **/
    upsert<T extends shiftsUpsertArgs>(
      args: SelectSubset<T, shiftsUpsertArgs>
    ): Prisma__shiftsClient<shiftsGetPayload<T>>

    /**
     * Count the number of Shifts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {shiftsCountArgs} args - Arguments to filter Shifts to count.
     * @example
     * // Count the number of Shifts
     * const count = await prisma.shifts.count({
     *   where: {
     *     // ... the filter for the Shifts we want to count
     *   }
     * })
    **/
    count<T extends shiftsCountArgs>(
      args?: Subset<T, shiftsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ShiftsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Shifts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ShiftsAggregateArgs>(args: Subset<T, ShiftsAggregateArgs>): PrismaPromise<GetShiftsAggregateType<T>>

    /**
     * Group by Shifts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ShiftsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ShiftsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ShiftsGroupByArgs['orderBy'] }
        : { orderBy?: ShiftsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ShiftsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetShiftsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for shifts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__shiftsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    jobs<T extends shiftsJobsArgs= {}>(args?: Subset<T, shiftsJobsArgs>): PrismaPromise<Array<jobsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * shifts base type for findUnique actions
   */
  export type shiftsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the shifts
     * 
    **/
    select?: shiftsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: shiftsInclude | null
    /**
     * Filter, which shifts to fetch.
     * 
    **/
    where: shiftsWhereUniqueInput
  }

  /**
   * shifts findUnique
   */
  export interface shiftsFindUniqueArgs extends shiftsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * shifts findUniqueOrThrow
   */
  export type shiftsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the shifts
     * 
    **/
    select?: shiftsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: shiftsInclude | null
    /**
     * Filter, which shifts to fetch.
     * 
    **/
    where: shiftsWhereUniqueInput
  }


  /**
   * shifts base type for findFirst actions
   */
  export type shiftsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the shifts
     * 
    **/
    select?: shiftsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: shiftsInclude | null
    /**
     * Filter, which shifts to fetch.
     * 
    **/
    where?: shiftsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shifts to fetch.
     * 
    **/
    orderBy?: Enumerable<shiftsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for shifts.
     * 
    **/
    cursor?: shiftsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shifts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shifts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of shifts.
     * 
    **/
    distinct?: Enumerable<ShiftsScalarFieldEnum>
  }

  /**
   * shifts findFirst
   */
  export interface shiftsFindFirstArgs extends shiftsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * shifts findFirstOrThrow
   */
  export type shiftsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the shifts
     * 
    **/
    select?: shiftsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: shiftsInclude | null
    /**
     * Filter, which shifts to fetch.
     * 
    **/
    where?: shiftsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shifts to fetch.
     * 
    **/
    orderBy?: Enumerable<shiftsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for shifts.
     * 
    **/
    cursor?: shiftsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shifts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shifts.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of shifts.
     * 
    **/
    distinct?: Enumerable<ShiftsScalarFieldEnum>
  }


  /**
   * shifts findMany
   */
  export type shiftsFindManyArgs = {
    /**
     * Select specific fields to fetch from the shifts
     * 
    **/
    select?: shiftsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: shiftsInclude | null
    /**
     * Filter, which shifts to fetch.
     * 
    **/
    where?: shiftsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of shifts to fetch.
     * 
    **/
    orderBy?: Enumerable<shiftsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing shifts.
     * 
    **/
    cursor?: shiftsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` shifts from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` shifts.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ShiftsScalarFieldEnum>
  }


  /**
   * shifts create
   */
  export type shiftsCreateArgs = {
    /**
     * Select specific fields to fetch from the shifts
     * 
    **/
    select?: shiftsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: shiftsInclude | null
    /**
     * The data needed to create a shifts.
     * 
    **/
    data: XOR<shiftsCreateInput, shiftsUncheckedCreateInput>
  }


  /**
   * shifts createMany
   */
  export type shiftsCreateManyArgs = {
    /**
     * The data used to create many shifts.
     * 
    **/
    data: Enumerable<shiftsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * shifts update
   */
  export type shiftsUpdateArgs = {
    /**
     * Select specific fields to fetch from the shifts
     * 
    **/
    select?: shiftsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: shiftsInclude | null
    /**
     * The data needed to update a shifts.
     * 
    **/
    data: XOR<shiftsUpdateInput, shiftsUncheckedUpdateInput>
    /**
     * Choose, which shifts to update.
     * 
    **/
    where: shiftsWhereUniqueInput
  }


  /**
   * shifts updateMany
   */
  export type shiftsUpdateManyArgs = {
    /**
     * The data used to update shifts.
     * 
    **/
    data: XOR<shiftsUpdateManyMutationInput, shiftsUncheckedUpdateManyInput>
    /**
     * Filter which shifts to update
     * 
    **/
    where?: shiftsWhereInput
  }


  /**
   * shifts upsert
   */
  export type shiftsUpsertArgs = {
    /**
     * Select specific fields to fetch from the shifts
     * 
    **/
    select?: shiftsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: shiftsInclude | null
    /**
     * The filter to search for the shifts to update in case it exists.
     * 
    **/
    where: shiftsWhereUniqueInput
    /**
     * In case the shifts found by the `where` argument doesn't exist, create a new shifts with this data.
     * 
    **/
    create: XOR<shiftsCreateInput, shiftsUncheckedCreateInput>
    /**
     * In case the shifts was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<shiftsUpdateInput, shiftsUncheckedUpdateInput>
  }


  /**
   * shifts delete
   */
  export type shiftsDeleteArgs = {
    /**
     * Select specific fields to fetch from the shifts
     * 
    **/
    select?: shiftsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: shiftsInclude | null
    /**
     * Filter which shifts to delete.
     * 
    **/
    where: shiftsWhereUniqueInput
  }


  /**
   * shifts deleteMany
   */
  export type shiftsDeleteManyArgs = {
    /**
     * Filter which shifts to delete
     * 
    **/
    where?: shiftsWhereInput
  }


  /**
   * shifts.jobs
   */
  export type shiftsJobsArgs = {
    /**
     * Select specific fields to fetch from the jobs
     * 
    **/
    select?: jobsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: jobsInclude | null
    where?: jobsWhereInput
    orderBy?: Enumerable<jobsOrderByWithRelationInput>
    cursor?: jobsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<JobsScalarFieldEnum>
  }


  /**
   * shifts without action
   */
  export type shiftsArgs = {
    /**
     * Select specific fields to fetch from the shifts
     * 
    **/
    select?: shiftsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: shiftsInclude | null
  }



  /**
   * Model jobs
   */


  export type AggregateJobs = {
    _count: JobsCountAggregateOutputType | null
    _avg: JobsAvgAggregateOutputType | null
    _sum: JobsSumAggregateOutputType | null
    _min: JobsMinAggregateOutputType | null
    _max: JobsMaxAggregateOutputType | null
  }

  export type JobsAvgAggregateOutputType = {
    user_id: number | null
    shift_id: number | null
  }

  export type JobsSumAggregateOutputType = {
    user_id: bigint | null
    shift_id: bigint | null
  }

  export type JobsMinAggregateOutputType = {
    user_id: bigint | null
    shift_id: bigint | null
  }

  export type JobsMaxAggregateOutputType = {
    user_id: bigint | null
    shift_id: bigint | null
  }

  export type JobsCountAggregateOutputType = {
    user_id: number
    shift_id: number
    _all: number
  }


  export type JobsAvgAggregateInputType = {
    user_id?: true
    shift_id?: true
  }

  export type JobsSumAggregateInputType = {
    user_id?: true
    shift_id?: true
  }

  export type JobsMinAggregateInputType = {
    user_id?: true
    shift_id?: true
  }

  export type JobsMaxAggregateInputType = {
    user_id?: true
    shift_id?: true
  }

  export type JobsCountAggregateInputType = {
    user_id?: true
    shift_id?: true
    _all?: true
  }

  export type JobsAggregateArgs = {
    /**
     * Filter which jobs to aggregate.
     * 
    **/
    where?: jobsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jobs to fetch.
     * 
    **/
    orderBy?: Enumerable<jobsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: jobsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jobs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jobs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned jobs
    **/
    _count?: true | JobsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: JobsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: JobsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: JobsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: JobsMaxAggregateInputType
  }

  export type GetJobsAggregateType<T extends JobsAggregateArgs> = {
        [P in keyof T & keyof AggregateJobs]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateJobs[P]>
      : GetScalarType<T[P], AggregateJobs[P]>
  }




  export type JobsGroupByArgs = {
    where?: jobsWhereInput
    orderBy?: Enumerable<jobsOrderByWithAggregationInput>
    by: Array<JobsScalarFieldEnum>
    having?: jobsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: JobsCountAggregateInputType | true
    _avg?: JobsAvgAggregateInputType
    _sum?: JobsSumAggregateInputType
    _min?: JobsMinAggregateInputType
    _max?: JobsMaxAggregateInputType
  }


  export type JobsGroupByOutputType = {
    user_id: bigint
    shift_id: bigint
    _count: JobsCountAggregateOutputType | null
    _avg: JobsAvgAggregateOutputType | null
    _sum: JobsSumAggregateOutputType | null
    _min: JobsMinAggregateOutputType | null
    _max: JobsMaxAggregateOutputType | null
  }

  type GetJobsGroupByPayload<T extends JobsGroupByArgs> = PrismaPromise<
    Array<
      PickArray<JobsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof JobsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], JobsGroupByOutputType[P]>
            : GetScalarType<T[P], JobsGroupByOutputType[P]>
        }
      >
    >


  export type jobsSelect = {
    user_id?: boolean
    shift_id?: boolean
    shifts?: boolean | shiftsArgs
    users?: boolean | usersArgs
  }


  export type jobsInclude = {
    shifts?: boolean | shiftsArgs
    users?: boolean | usersArgs
  } 

  export type jobsGetPayload<S extends boolean | null | undefined | jobsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? jobs :
    S extends undefined ? never :
    S extends { include: any } & (jobsArgs | jobsFindManyArgs)
    ? jobs  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'shifts' ? shiftsGetPayload<S['include'][P]> :
        P extends 'users' ? usersGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (jobsArgs | jobsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'shifts' ? shiftsGetPayload<S['select'][P]> :
        P extends 'users' ? usersGetPayload<S['select'][P]> :  P extends keyof jobs ? jobs[P] : never
  } 
      : jobs


  type jobsCountArgs = Merge<
    Omit<jobsFindManyArgs, 'select' | 'include'> & {
      select?: JobsCountAggregateInputType | true
    }
  >

  export interface jobsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {
    /**
     * Find zero or one Jobs that matches the filter.
     * @param {jobsFindUniqueArgs} args - Arguments to find a Jobs
     * @example
     * // Get one Jobs
     * const jobs = await prisma.jobs.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends jobsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, jobsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'jobs'> extends True ? Prisma__jobsClient<jobsGetPayload<T>> : Prisma__jobsClient<jobsGetPayload<T> | null, null>

    /**
     * Find one Jobs that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {jobsFindUniqueOrThrowArgs} args - Arguments to find a Jobs
     * @example
     * // Get one Jobs
     * const jobs = await prisma.jobs.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends jobsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, jobsFindUniqueOrThrowArgs>
    ): Prisma__jobsClient<jobsGetPayload<T>>

    /**
     * Find the first Jobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobsFindFirstArgs} args - Arguments to find a Jobs
     * @example
     * // Get one Jobs
     * const jobs = await prisma.jobs.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends jobsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, jobsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'jobs'> extends True ? Prisma__jobsClient<jobsGetPayload<T>> : Prisma__jobsClient<jobsGetPayload<T> | null, null>

    /**
     * Find the first Jobs that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobsFindFirstOrThrowArgs} args - Arguments to find a Jobs
     * @example
     * // Get one Jobs
     * const jobs = await prisma.jobs.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends jobsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, jobsFindFirstOrThrowArgs>
    ): Prisma__jobsClient<jobsGetPayload<T>>

    /**
     * Find zero or more Jobs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Jobs
     * const jobs = await prisma.jobs.findMany()
     * 
     * // Get first 10 Jobs
     * const jobs = await prisma.jobs.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const jobsWithUser_idOnly = await prisma.jobs.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends jobsFindManyArgs>(
      args?: SelectSubset<T, jobsFindManyArgs>
    ): PrismaPromise<Array<jobsGetPayload<T>>>

    /**
     * Create a Jobs.
     * @param {jobsCreateArgs} args - Arguments to create a Jobs.
     * @example
     * // Create one Jobs
     * const Jobs = await prisma.jobs.create({
     *   data: {
     *     // ... data to create a Jobs
     *   }
     * })
     * 
    **/
    create<T extends jobsCreateArgs>(
      args: SelectSubset<T, jobsCreateArgs>
    ): Prisma__jobsClient<jobsGetPayload<T>>

    /**
     * Create many Jobs.
     *     @param {jobsCreateManyArgs} args - Arguments to create many Jobs.
     *     @example
     *     // Create many Jobs
     *     const jobs = await prisma.jobs.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends jobsCreateManyArgs>(
      args?: SelectSubset<T, jobsCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Jobs.
     * @param {jobsDeleteArgs} args - Arguments to delete one Jobs.
     * @example
     * // Delete one Jobs
     * const Jobs = await prisma.jobs.delete({
     *   where: {
     *     // ... filter to delete one Jobs
     *   }
     * })
     * 
    **/
    delete<T extends jobsDeleteArgs>(
      args: SelectSubset<T, jobsDeleteArgs>
    ): Prisma__jobsClient<jobsGetPayload<T>>

    /**
     * Update one Jobs.
     * @param {jobsUpdateArgs} args - Arguments to update one Jobs.
     * @example
     * // Update one Jobs
     * const jobs = await prisma.jobs.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends jobsUpdateArgs>(
      args: SelectSubset<T, jobsUpdateArgs>
    ): Prisma__jobsClient<jobsGetPayload<T>>

    /**
     * Delete zero or more Jobs.
     * @param {jobsDeleteManyArgs} args - Arguments to filter Jobs to delete.
     * @example
     * // Delete a few Jobs
     * const { count } = await prisma.jobs.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends jobsDeleteManyArgs>(
      args?: SelectSubset<T, jobsDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Jobs
     * const jobs = await prisma.jobs.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends jobsUpdateManyArgs>(
      args: SelectSubset<T, jobsUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Jobs.
     * @param {jobsUpsertArgs} args - Arguments to update or create a Jobs.
     * @example
     * // Update or create a Jobs
     * const jobs = await prisma.jobs.upsert({
     *   create: {
     *     // ... data to create a Jobs
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Jobs we want to update
     *   }
     * })
    **/
    upsert<T extends jobsUpsertArgs>(
      args: SelectSubset<T, jobsUpsertArgs>
    ): Prisma__jobsClient<jobsGetPayload<T>>

    /**
     * Count the number of Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {jobsCountArgs} args - Arguments to filter Jobs to count.
     * @example
     * // Count the number of Jobs
     * const count = await prisma.jobs.count({
     *   where: {
     *     // ... the filter for the Jobs we want to count
     *   }
     * })
    **/
    count<T extends jobsCountArgs>(
      args?: Subset<T, jobsCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], JobsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends JobsAggregateArgs>(args: Subset<T, JobsAggregateArgs>): PrismaPromise<GetJobsAggregateType<T>>

    /**
     * Group by Jobs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {JobsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends JobsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: JobsGroupByArgs['orderBy'] }
        : { orderBy?: JobsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, JobsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetJobsGroupByPayload<T> : PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for jobs.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__jobsClient<T, Null = never> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    shifts<T extends shiftsArgs= {}>(args?: Subset<T, shiftsArgs>): Prisma__shiftsClient<shiftsGetPayload<T> | Null>;

    users<T extends usersArgs= {}>(args?: Subset<T, usersArgs>): Prisma__usersClient<usersGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * jobs base type for findUnique actions
   */
  export type jobsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the jobs
     * 
    **/
    select?: jobsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: jobsInclude | null
    /**
     * Filter, which jobs to fetch.
     * 
    **/
    where: jobsWhereUniqueInput
  }

  /**
   * jobs findUnique
   */
  export interface jobsFindUniqueArgs extends jobsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * jobs findUniqueOrThrow
   */
  export type jobsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the jobs
     * 
    **/
    select?: jobsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: jobsInclude | null
    /**
     * Filter, which jobs to fetch.
     * 
    **/
    where: jobsWhereUniqueInput
  }


  /**
   * jobs base type for findFirst actions
   */
  export type jobsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the jobs
     * 
    **/
    select?: jobsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: jobsInclude | null
    /**
     * Filter, which jobs to fetch.
     * 
    **/
    where?: jobsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jobs to fetch.
     * 
    **/
    orderBy?: Enumerable<jobsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for jobs.
     * 
    **/
    cursor?: jobsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jobs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jobs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of jobs.
     * 
    **/
    distinct?: Enumerable<JobsScalarFieldEnum>
  }

  /**
   * jobs findFirst
   */
  export interface jobsFindFirstArgs extends jobsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * jobs findFirstOrThrow
   */
  export type jobsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the jobs
     * 
    **/
    select?: jobsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: jobsInclude | null
    /**
     * Filter, which jobs to fetch.
     * 
    **/
    where?: jobsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jobs to fetch.
     * 
    **/
    orderBy?: Enumerable<jobsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for jobs.
     * 
    **/
    cursor?: jobsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jobs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jobs.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of jobs.
     * 
    **/
    distinct?: Enumerable<JobsScalarFieldEnum>
  }


  /**
   * jobs findMany
   */
  export type jobsFindManyArgs = {
    /**
     * Select specific fields to fetch from the jobs
     * 
    **/
    select?: jobsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: jobsInclude | null
    /**
     * Filter, which jobs to fetch.
     * 
    **/
    where?: jobsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of jobs to fetch.
     * 
    **/
    orderBy?: Enumerable<jobsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing jobs.
     * 
    **/
    cursor?: jobsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` jobs from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` jobs.
     * 
    **/
    skip?: number
    distinct?: Enumerable<JobsScalarFieldEnum>
  }


  /**
   * jobs create
   */
  export type jobsCreateArgs = {
    /**
     * Select specific fields to fetch from the jobs
     * 
    **/
    select?: jobsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: jobsInclude | null
    /**
     * The data needed to create a jobs.
     * 
    **/
    data: XOR<jobsCreateInput, jobsUncheckedCreateInput>
  }


  /**
   * jobs createMany
   */
  export type jobsCreateManyArgs = {
    /**
     * The data used to create many jobs.
     * 
    **/
    data: Enumerable<jobsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * jobs update
   */
  export type jobsUpdateArgs = {
    /**
     * Select specific fields to fetch from the jobs
     * 
    **/
    select?: jobsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: jobsInclude | null
    /**
     * The data needed to update a jobs.
     * 
    **/
    data: XOR<jobsUpdateInput, jobsUncheckedUpdateInput>
    /**
     * Choose, which jobs to update.
     * 
    **/
    where: jobsWhereUniqueInput
  }


  /**
   * jobs updateMany
   */
  export type jobsUpdateManyArgs = {
    /**
     * The data used to update jobs.
     * 
    **/
    data: XOR<jobsUpdateManyMutationInput, jobsUncheckedUpdateManyInput>
    /**
     * Filter which jobs to update
     * 
    **/
    where?: jobsWhereInput
  }


  /**
   * jobs upsert
   */
  export type jobsUpsertArgs = {
    /**
     * Select specific fields to fetch from the jobs
     * 
    **/
    select?: jobsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: jobsInclude | null
    /**
     * The filter to search for the jobs to update in case it exists.
     * 
    **/
    where: jobsWhereUniqueInput
    /**
     * In case the jobs found by the `where` argument doesn't exist, create a new jobs with this data.
     * 
    **/
    create: XOR<jobsCreateInput, jobsUncheckedCreateInput>
    /**
     * In case the jobs was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<jobsUpdateInput, jobsUncheckedUpdateInput>
  }


  /**
   * jobs delete
   */
  export type jobsDeleteArgs = {
    /**
     * Select specific fields to fetch from the jobs
     * 
    **/
    select?: jobsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: jobsInclude | null
    /**
     * Filter which jobs to delete.
     * 
    **/
    where: jobsWhereUniqueInput
  }


  /**
   * jobs deleteMany
   */
  export type jobsDeleteManyArgs = {
    /**
     * Filter which jobs to delete
     * 
    **/
    where?: jobsWhereInput
  }


  /**
   * jobs without action
   */
  export type jobsArgs = {
    /**
     * Select specific fields to fetch from the jobs
     * 
    **/
    select?: jobsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: jobsInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const JobsScalarFieldEnum: {
    user_id: 'user_id',
    shift_id: 'shift_id'
  };

  export type JobsScalarFieldEnum = (typeof JobsScalarFieldEnum)[keyof typeof JobsScalarFieldEnum]


  export const ShiftsScalarFieldEnum: {
    id: 'id',
    start_time: 'start_time',
    end_time: 'end_time',
    created_at: 'created_at',
    updated_at: 'updated_at',
    max_volunteers: 'max_volunteers',
    work_type: 'work_type',
    location: 'location',
    description: 'description'
  };

  export type ShiftsScalarFieldEnum = (typeof ShiftsScalarFieldEnum)[keyof typeof ShiftsScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UsersScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    email_verified_at: 'email_verified_at',
    password: 'password',
    phone: 'phone',
    address: 'address',
    city: 'city',
    state: 'state',
    country: 'country',
    zip: 'zip',
    age: 'age',
    company: 'company',
    employee_id: 'employee_id',
    marketing: 'marketing',
    user_type: 'user_type',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type usersWhereInput = {
    AND?: Enumerable<usersWhereInput>
    OR?: Enumerable<usersWhereInput>
    NOT?: Enumerable<usersWhereInput>
    id?: BigIntFilter | bigint | number
    name?: StringFilter | string
    email?: StringFilter | string
    email_verified_at?: DateTimeNullableFilter | Date | string | null
    password?: StringFilter | string
    phone?: StringFilter | string
    address?: StringFilter | string
    city?: StringFilter | string
    state?: StringFilter | string
    country?: StringFilter | string
    zip?: StringFilter | string
    age?: IntFilter | number
    company?: StringNullableFilter | string | null
    employee_id?: StringNullableFilter | string | null
    marketing?: BoolFilter | boolean
    user_type?: Enumusers_user_typeFilter | users_user_type
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
    jobs?: JobsListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    email_verified_at?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    zip?: SortOrder
    age?: SortOrder
    company?: SortOrder
    employee_id?: SortOrder
    marketing?: SortOrder
    user_type?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    jobs?: jobsOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = {
    id?: bigint | number
    email?: string
  }

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    email_verified_at?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    zip?: SortOrder
    age?: SortOrder
    company?: SortOrder
    employee_id?: SortOrder
    marketing?: SortOrder
    user_type?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usersScalarWhereWithAggregatesInput>
    OR?: Enumerable<usersScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usersScalarWhereWithAggregatesInput>
    id?: BigIntWithAggregatesFilter | bigint | number
    name?: StringWithAggregatesFilter | string
    email?: StringWithAggregatesFilter | string
    email_verified_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    password?: StringWithAggregatesFilter | string
    phone?: StringWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
    city?: StringWithAggregatesFilter | string
    state?: StringWithAggregatesFilter | string
    country?: StringWithAggregatesFilter | string
    zip?: StringWithAggregatesFilter | string
    age?: IntWithAggregatesFilter | number
    company?: StringNullableWithAggregatesFilter | string | null
    employee_id?: StringNullableWithAggregatesFilter | string | null
    marketing?: BoolWithAggregatesFilter | boolean
    user_type?: Enumusers_user_typeWithAggregatesFilter | users_user_type
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
  }

  export type shiftsWhereInput = {
    AND?: Enumerable<shiftsWhereInput>
    OR?: Enumerable<shiftsWhereInput>
    NOT?: Enumerable<shiftsWhereInput>
    id?: BigIntFilter | bigint | number
    start_time?: DateTimeFilter | Date | string
    end_time?: DateTimeFilter | Date | string
    created_at?: DateTimeNullableFilter | Date | string | null
    updated_at?: DateTimeNullableFilter | Date | string | null
    max_volunteers?: IntFilter | number
    work_type?: Enumshifts_work_typeFilter | shifts_work_type
    location?: StringFilter | string
    description?: StringFilter | string
    jobs?: JobsListRelationFilter
  }

  export type shiftsOrderByWithRelationInput = {
    id?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    max_volunteers?: SortOrder
    work_type?: SortOrder
    location?: SortOrder
    description?: SortOrder
    jobs?: jobsOrderByRelationAggregateInput
  }

  export type shiftsWhereUniqueInput = {
    id?: bigint | number
  }

  export type shiftsOrderByWithAggregationInput = {
    id?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    max_volunteers?: SortOrder
    work_type?: SortOrder
    location?: SortOrder
    description?: SortOrder
    _count?: shiftsCountOrderByAggregateInput
    _avg?: shiftsAvgOrderByAggregateInput
    _max?: shiftsMaxOrderByAggregateInput
    _min?: shiftsMinOrderByAggregateInput
    _sum?: shiftsSumOrderByAggregateInput
  }

  export type shiftsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<shiftsScalarWhereWithAggregatesInput>
    OR?: Enumerable<shiftsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<shiftsScalarWhereWithAggregatesInput>
    id?: BigIntWithAggregatesFilter | bigint | number
    start_time?: DateTimeWithAggregatesFilter | Date | string
    end_time?: DateTimeWithAggregatesFilter | Date | string
    created_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter | Date | string | null
    max_volunteers?: IntWithAggregatesFilter | number
    work_type?: Enumshifts_work_typeWithAggregatesFilter | shifts_work_type
    location?: StringWithAggregatesFilter | string
    description?: StringWithAggregatesFilter | string
  }

  export type jobsWhereInput = {
    AND?: Enumerable<jobsWhereInput>
    OR?: Enumerable<jobsWhereInput>
    NOT?: Enumerable<jobsWhereInput>
    user_id?: BigIntFilter | bigint | number
    shift_id?: BigIntFilter | bigint | number
    shifts?: XOR<ShiftsRelationFilter, shiftsWhereInput>
    users?: XOR<UsersRelationFilter, usersWhereInput>
  }

  export type jobsOrderByWithRelationInput = {
    user_id?: SortOrder
    shift_id?: SortOrder
    shifts?: shiftsOrderByWithRelationInput
    users?: usersOrderByWithRelationInput
  }

  export type jobsWhereUniqueInput = {
    user_id_shift_id?: jobsUser_idShift_idCompoundUniqueInput
  }

  export type jobsOrderByWithAggregationInput = {
    user_id?: SortOrder
    shift_id?: SortOrder
    _count?: jobsCountOrderByAggregateInput
    _avg?: jobsAvgOrderByAggregateInput
    _max?: jobsMaxOrderByAggregateInput
    _min?: jobsMinOrderByAggregateInput
    _sum?: jobsSumOrderByAggregateInput
  }

  export type jobsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<jobsScalarWhereWithAggregatesInput>
    OR?: Enumerable<jobsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<jobsScalarWhereWithAggregatesInput>
    user_id?: BigIntWithAggregatesFilter | bigint | number
    shift_id?: BigIntWithAggregatesFilter | bigint | number
  }

  export type usersCreateInput = {
    id?: bigint | number
    name: string
    email: string
    email_verified_at?: Date | string | null
    password: string
    phone: string
    address: string
    city: string
    state: string
    country: string
    zip: string
    age: number
    company?: string | null
    employee_id?: string | null
    marketing?: boolean
    user_type?: users_user_type
    created_at?: Date | string | null
    updated_at?: Date | string | null
    jobs?: jobsCreateNestedManyWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    id?: bigint | number
    name: string
    email: string
    email_verified_at?: Date | string | null
    password: string
    phone: string
    address: string
    city: string
    state: string
    country: string
    zip: string
    age: number
    company?: string | null
    employee_id?: string | null
    marketing?: boolean
    user_type?: users_user_type
    created_at?: Date | string | null
    updated_at?: Date | string | null
    jobs?: jobsUncheckedCreateNestedManyWithoutUsersInput
  }

  export type usersUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    company?: NullableStringFieldUpdateOperationsInput | string | null
    employee_id?: NullableStringFieldUpdateOperationsInput | string | null
    marketing?: BoolFieldUpdateOperationsInput | boolean
    user_type?: Enumusers_user_typeFieldUpdateOperationsInput | users_user_type
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jobs?: jobsUpdateManyWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    company?: NullableStringFieldUpdateOperationsInput | string | null
    employee_id?: NullableStringFieldUpdateOperationsInput | string | null
    marketing?: BoolFieldUpdateOperationsInput | boolean
    user_type?: Enumusers_user_typeFieldUpdateOperationsInput | users_user_type
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jobs?: jobsUncheckedUpdateManyWithoutUsersNestedInput
  }

  export type usersCreateManyInput = {
    id?: bigint | number
    name: string
    email: string
    email_verified_at?: Date | string | null
    password: string
    phone: string
    address: string
    city: string
    state: string
    country: string
    zip: string
    age: number
    company?: string | null
    employee_id?: string | null
    marketing?: boolean
    user_type?: users_user_type
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type usersUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    company?: NullableStringFieldUpdateOperationsInput | string | null
    employee_id?: NullableStringFieldUpdateOperationsInput | string | null
    marketing?: BoolFieldUpdateOperationsInput | boolean
    user_type?: Enumusers_user_typeFieldUpdateOperationsInput | users_user_type
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    company?: NullableStringFieldUpdateOperationsInput | string | null
    employee_id?: NullableStringFieldUpdateOperationsInput | string | null
    marketing?: BoolFieldUpdateOperationsInput | boolean
    user_type?: Enumusers_user_typeFieldUpdateOperationsInput | users_user_type
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type shiftsCreateInput = {
    id?: bigint | number
    start_time: Date | string
    end_time: Date | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    max_volunteers?: number
    work_type?: shifts_work_type
    location: string
    description: string
    jobs?: jobsCreateNestedManyWithoutShiftsInput
  }

  export type shiftsUncheckedCreateInput = {
    id?: bigint | number
    start_time: Date | string
    end_time: Date | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    max_volunteers?: number
    work_type?: shifts_work_type
    location: string
    description: string
    jobs?: jobsUncheckedCreateNestedManyWithoutShiftsInput
  }

  export type shiftsUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    max_volunteers?: IntFieldUpdateOperationsInput | number
    work_type?: Enumshifts_work_typeFieldUpdateOperationsInput | shifts_work_type
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    jobs?: jobsUpdateManyWithoutShiftsNestedInput
  }

  export type shiftsUncheckedUpdateInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    max_volunteers?: IntFieldUpdateOperationsInput | number
    work_type?: Enumshifts_work_typeFieldUpdateOperationsInput | shifts_work_type
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    jobs?: jobsUncheckedUpdateManyWithoutShiftsNestedInput
  }

  export type shiftsCreateManyInput = {
    id?: bigint | number
    start_time: Date | string
    end_time: Date | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    max_volunteers?: number
    work_type?: shifts_work_type
    location: string
    description: string
  }

  export type shiftsUpdateManyMutationInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    max_volunteers?: IntFieldUpdateOperationsInput | number
    work_type?: Enumshifts_work_typeFieldUpdateOperationsInput | shifts_work_type
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type shiftsUncheckedUpdateManyInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    max_volunteers?: IntFieldUpdateOperationsInput | number
    work_type?: Enumshifts_work_typeFieldUpdateOperationsInput | shifts_work_type
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type jobsCreateInput = {
    shifts: shiftsCreateNestedOneWithoutJobsInput
    users: usersCreateNestedOneWithoutJobsInput
  }

  export type jobsUncheckedCreateInput = {
    user_id: bigint | number
    shift_id: bigint | number
  }

  export type jobsUpdateInput = {
    shifts?: shiftsUpdateOneRequiredWithoutJobsNestedInput
    users?: usersUpdateOneRequiredWithoutJobsNestedInput
  }

  export type jobsUncheckedUpdateInput = {
    user_id?: BigIntFieldUpdateOperationsInput | bigint | number
    shift_id?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type jobsCreateManyInput = {
    user_id: bigint | number
    shift_id: bigint | number
  }

  export type jobsUpdateManyMutationInput = {

  }

  export type jobsUncheckedUpdateManyInput = {
    user_id?: BigIntFieldUpdateOperationsInput | bigint | number
    shift_id?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type BigIntFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntFilter | bigint | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type Enumusers_user_typeFilter = {
    equals?: users_user_type
    in?: Enumerable<users_user_type>
    notIn?: Enumerable<users_user_type>
    not?: NestedEnumusers_user_typeFilter | users_user_type
  }

  export type JobsListRelationFilter = {
    every?: jobsWhereInput
    some?: jobsWhereInput
    none?: jobsWhereInput
  }

  export type jobsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    email_verified_at?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    zip?: SortOrder
    age?: SortOrder
    company?: SortOrder
    employee_id?: SortOrder
    marketing?: SortOrder
    user_type?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    email_verified_at?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    zip?: SortOrder
    age?: SortOrder
    company?: SortOrder
    employee_id?: SortOrder
    marketing?: SortOrder
    user_type?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    email_verified_at?: SortOrder
    password?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    city?: SortOrder
    state?: SortOrder
    country?: SortOrder
    zip?: SortOrder
    age?: SortOrder
    company?: SortOrder
    employee_id?: SortOrder
    marketing?: SortOrder
    user_type?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    id?: SortOrder
    age?: SortOrder
  }

  export type BigIntWithAggregatesFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntWithAggregatesFilter | bigint | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedBigIntFilter
    _min?: NestedBigIntFilter
    _max?: NestedBigIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type Enumusers_user_typeWithAggregatesFilter = {
    equals?: users_user_type
    in?: Enumerable<users_user_type>
    notIn?: Enumerable<users_user_type>
    not?: NestedEnumusers_user_typeWithAggregatesFilter | users_user_type
    _count?: NestedIntFilter
    _min?: NestedEnumusers_user_typeFilter
    _max?: NestedEnumusers_user_typeFilter
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type Enumshifts_work_typeFilter = {
    equals?: shifts_work_type
    in?: Enumerable<shifts_work_type>
    notIn?: Enumerable<shifts_work_type>
    not?: NestedEnumshifts_work_typeFilter | shifts_work_type
  }

  export type shiftsCountOrderByAggregateInput = {
    id?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    max_volunteers?: SortOrder
    work_type?: SortOrder
    location?: SortOrder
    description?: SortOrder
  }

  export type shiftsAvgOrderByAggregateInput = {
    id?: SortOrder
    max_volunteers?: SortOrder
  }

  export type shiftsMaxOrderByAggregateInput = {
    id?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    max_volunteers?: SortOrder
    work_type?: SortOrder
    location?: SortOrder
    description?: SortOrder
  }

  export type shiftsMinOrderByAggregateInput = {
    id?: SortOrder
    start_time?: SortOrder
    end_time?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    max_volunteers?: SortOrder
    work_type?: SortOrder
    location?: SortOrder
    description?: SortOrder
  }

  export type shiftsSumOrderByAggregateInput = {
    id?: SortOrder
    max_volunteers?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type Enumshifts_work_typeWithAggregatesFilter = {
    equals?: shifts_work_type
    in?: Enumerable<shifts_work_type>
    notIn?: Enumerable<shifts_work_type>
    not?: NestedEnumshifts_work_typeWithAggregatesFilter | shifts_work_type
    _count?: NestedIntFilter
    _min?: NestedEnumshifts_work_typeFilter
    _max?: NestedEnumshifts_work_typeFilter
  }

  export type ShiftsRelationFilter = {
    is?: shiftsWhereInput
    isNot?: shiftsWhereInput
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type jobsUser_idShift_idCompoundUniqueInput = {
    user_id: bigint | number
    shift_id: bigint | number
  }

  export type jobsCountOrderByAggregateInput = {
    user_id?: SortOrder
    shift_id?: SortOrder
  }

  export type jobsAvgOrderByAggregateInput = {
    user_id?: SortOrder
    shift_id?: SortOrder
  }

  export type jobsMaxOrderByAggregateInput = {
    user_id?: SortOrder
    shift_id?: SortOrder
  }

  export type jobsMinOrderByAggregateInput = {
    user_id?: SortOrder
    shift_id?: SortOrder
  }

  export type jobsSumOrderByAggregateInput = {
    user_id?: SortOrder
    shift_id?: SortOrder
  }

  export type jobsCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<jobsCreateWithoutUsersInput>, Enumerable<jobsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<jobsCreateOrConnectWithoutUsersInput>
    createMany?: jobsCreateManyUsersInputEnvelope
    connect?: Enumerable<jobsWhereUniqueInput>
  }

  export type jobsUncheckedCreateNestedManyWithoutUsersInput = {
    create?: XOR<Enumerable<jobsCreateWithoutUsersInput>, Enumerable<jobsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<jobsCreateOrConnectWithoutUsersInput>
    createMany?: jobsCreateManyUsersInputEnvelope
    connect?: Enumerable<jobsWhereUniqueInput>
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type Enumusers_user_typeFieldUpdateOperationsInput = {
    set?: users_user_type
  }

  export type jobsUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<jobsCreateWithoutUsersInput>, Enumerable<jobsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<jobsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<jobsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: jobsCreateManyUsersInputEnvelope
    set?: Enumerable<jobsWhereUniqueInput>
    disconnect?: Enumerable<jobsWhereUniqueInput>
    delete?: Enumerable<jobsWhereUniqueInput>
    connect?: Enumerable<jobsWhereUniqueInput>
    update?: Enumerable<jobsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<jobsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<jobsScalarWhereInput>
  }

  export type jobsUncheckedUpdateManyWithoutUsersNestedInput = {
    create?: XOR<Enumerable<jobsCreateWithoutUsersInput>, Enumerable<jobsUncheckedCreateWithoutUsersInput>>
    connectOrCreate?: Enumerable<jobsCreateOrConnectWithoutUsersInput>
    upsert?: Enumerable<jobsUpsertWithWhereUniqueWithoutUsersInput>
    createMany?: jobsCreateManyUsersInputEnvelope
    set?: Enumerable<jobsWhereUniqueInput>
    disconnect?: Enumerable<jobsWhereUniqueInput>
    delete?: Enumerable<jobsWhereUniqueInput>
    connect?: Enumerable<jobsWhereUniqueInput>
    update?: Enumerable<jobsUpdateWithWhereUniqueWithoutUsersInput>
    updateMany?: Enumerable<jobsUpdateManyWithWhereWithoutUsersInput>
    deleteMany?: Enumerable<jobsScalarWhereInput>
  }

  export type jobsCreateNestedManyWithoutShiftsInput = {
    create?: XOR<Enumerable<jobsCreateWithoutShiftsInput>, Enumerable<jobsUncheckedCreateWithoutShiftsInput>>
    connectOrCreate?: Enumerable<jobsCreateOrConnectWithoutShiftsInput>
    createMany?: jobsCreateManyShiftsInputEnvelope
    connect?: Enumerable<jobsWhereUniqueInput>
  }

  export type jobsUncheckedCreateNestedManyWithoutShiftsInput = {
    create?: XOR<Enumerable<jobsCreateWithoutShiftsInput>, Enumerable<jobsUncheckedCreateWithoutShiftsInput>>
    connectOrCreate?: Enumerable<jobsCreateOrConnectWithoutShiftsInput>
    createMany?: jobsCreateManyShiftsInputEnvelope
    connect?: Enumerable<jobsWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type Enumshifts_work_typeFieldUpdateOperationsInput = {
    set?: shifts_work_type
  }

  export type jobsUpdateManyWithoutShiftsNestedInput = {
    create?: XOR<Enumerable<jobsCreateWithoutShiftsInput>, Enumerable<jobsUncheckedCreateWithoutShiftsInput>>
    connectOrCreate?: Enumerable<jobsCreateOrConnectWithoutShiftsInput>
    upsert?: Enumerable<jobsUpsertWithWhereUniqueWithoutShiftsInput>
    createMany?: jobsCreateManyShiftsInputEnvelope
    set?: Enumerable<jobsWhereUniqueInput>
    disconnect?: Enumerable<jobsWhereUniqueInput>
    delete?: Enumerable<jobsWhereUniqueInput>
    connect?: Enumerable<jobsWhereUniqueInput>
    update?: Enumerable<jobsUpdateWithWhereUniqueWithoutShiftsInput>
    updateMany?: Enumerable<jobsUpdateManyWithWhereWithoutShiftsInput>
    deleteMany?: Enumerable<jobsScalarWhereInput>
  }

  export type jobsUncheckedUpdateManyWithoutShiftsNestedInput = {
    create?: XOR<Enumerable<jobsCreateWithoutShiftsInput>, Enumerable<jobsUncheckedCreateWithoutShiftsInput>>
    connectOrCreate?: Enumerable<jobsCreateOrConnectWithoutShiftsInput>
    upsert?: Enumerable<jobsUpsertWithWhereUniqueWithoutShiftsInput>
    createMany?: jobsCreateManyShiftsInputEnvelope
    set?: Enumerable<jobsWhereUniqueInput>
    disconnect?: Enumerable<jobsWhereUniqueInput>
    delete?: Enumerable<jobsWhereUniqueInput>
    connect?: Enumerable<jobsWhereUniqueInput>
    update?: Enumerable<jobsUpdateWithWhereUniqueWithoutShiftsInput>
    updateMany?: Enumerable<jobsUpdateManyWithWhereWithoutShiftsInput>
    deleteMany?: Enumerable<jobsScalarWhereInput>
  }

  export type shiftsCreateNestedOneWithoutJobsInput = {
    create?: XOR<shiftsCreateWithoutJobsInput, shiftsUncheckedCreateWithoutJobsInput>
    connectOrCreate?: shiftsCreateOrConnectWithoutJobsInput
    connect?: shiftsWhereUniqueInput
  }

  export type usersCreateNestedOneWithoutJobsInput = {
    create?: XOR<usersCreateWithoutJobsInput, usersUncheckedCreateWithoutJobsInput>
    connectOrCreate?: usersCreateOrConnectWithoutJobsInput
    connect?: usersWhereUniqueInput
  }

  export type shiftsUpdateOneRequiredWithoutJobsNestedInput = {
    create?: XOR<shiftsCreateWithoutJobsInput, shiftsUncheckedCreateWithoutJobsInput>
    connectOrCreate?: shiftsCreateOrConnectWithoutJobsInput
    upsert?: shiftsUpsertWithoutJobsInput
    connect?: shiftsWhereUniqueInput
    update?: XOR<shiftsUpdateWithoutJobsInput, shiftsUncheckedUpdateWithoutJobsInput>
  }

  export type usersUpdateOneRequiredWithoutJobsNestedInput = {
    create?: XOR<usersCreateWithoutJobsInput, usersUncheckedCreateWithoutJobsInput>
    connectOrCreate?: usersCreateOrConnectWithoutJobsInput
    upsert?: usersUpsertWithoutJobsInput
    connect?: usersWhereUniqueInput
    update?: XOR<usersUpdateWithoutJobsInput, usersUncheckedUpdateWithoutJobsInput>
  }

  export type NestedBigIntFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntFilter | bigint | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedEnumusers_user_typeFilter = {
    equals?: users_user_type
    in?: Enumerable<users_user_type>
    notIn?: Enumerable<users_user_type>
    not?: NestedEnumusers_user_typeFilter | users_user_type
  }

  export type NestedBigIntWithAggregatesFilter = {
    equals?: bigint | number
    in?: Enumerable<bigint> | Enumerable<number>
    notIn?: Enumerable<bigint> | Enumerable<number>
    lt?: bigint | number
    lte?: bigint | number
    gt?: bigint | number
    gte?: bigint | number
    not?: NestedBigIntWithAggregatesFilter | bigint | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedBigIntFilter
    _min?: NestedBigIntFilter
    _max?: NestedBigIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | null
    notIn?: Enumerable<Date> | Enumerable<string> | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }

  export type NestedEnumusers_user_typeWithAggregatesFilter = {
    equals?: users_user_type
    in?: Enumerable<users_user_type>
    notIn?: Enumerable<users_user_type>
    not?: NestedEnumusers_user_typeWithAggregatesFilter | users_user_type
    _count?: NestedIntFilter
    _min?: NestedEnumusers_user_typeFilter
    _max?: NestedEnumusers_user_typeFilter
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedEnumshifts_work_typeFilter = {
    equals?: shifts_work_type
    in?: Enumerable<shifts_work_type>
    notIn?: Enumerable<shifts_work_type>
    not?: NestedEnumshifts_work_typeFilter | shifts_work_type
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedEnumshifts_work_typeWithAggregatesFilter = {
    equals?: shifts_work_type
    in?: Enumerable<shifts_work_type>
    notIn?: Enumerable<shifts_work_type>
    not?: NestedEnumshifts_work_typeWithAggregatesFilter | shifts_work_type
    _count?: NestedIntFilter
    _min?: NestedEnumshifts_work_typeFilter
    _max?: NestedEnumshifts_work_typeFilter
  }

  export type jobsCreateWithoutUsersInput = {
    shifts: shiftsCreateNestedOneWithoutJobsInput
  }

  export type jobsUncheckedCreateWithoutUsersInput = {
    shift_id: bigint | number
  }

  export type jobsCreateOrConnectWithoutUsersInput = {
    where: jobsWhereUniqueInput
    create: XOR<jobsCreateWithoutUsersInput, jobsUncheckedCreateWithoutUsersInput>
  }

  export type jobsCreateManyUsersInputEnvelope = {
    data: Enumerable<jobsCreateManyUsersInput>
    skipDuplicates?: boolean
  }

  export type jobsUpsertWithWhereUniqueWithoutUsersInput = {
    where: jobsWhereUniqueInput
    update: XOR<jobsUpdateWithoutUsersInput, jobsUncheckedUpdateWithoutUsersInput>
    create: XOR<jobsCreateWithoutUsersInput, jobsUncheckedCreateWithoutUsersInput>
  }

  export type jobsUpdateWithWhereUniqueWithoutUsersInput = {
    where: jobsWhereUniqueInput
    data: XOR<jobsUpdateWithoutUsersInput, jobsUncheckedUpdateWithoutUsersInput>
  }

  export type jobsUpdateManyWithWhereWithoutUsersInput = {
    where: jobsScalarWhereInput
    data: XOR<jobsUpdateManyMutationInput, jobsUncheckedUpdateManyWithoutJobsInput>
  }

  export type jobsScalarWhereInput = {
    AND?: Enumerable<jobsScalarWhereInput>
    OR?: Enumerable<jobsScalarWhereInput>
    NOT?: Enumerable<jobsScalarWhereInput>
    user_id?: BigIntFilter | bigint | number
    shift_id?: BigIntFilter | bigint | number
  }

  export type jobsCreateWithoutShiftsInput = {
    users: usersCreateNestedOneWithoutJobsInput
  }

  export type jobsUncheckedCreateWithoutShiftsInput = {
    user_id: bigint | number
  }

  export type jobsCreateOrConnectWithoutShiftsInput = {
    where: jobsWhereUniqueInput
    create: XOR<jobsCreateWithoutShiftsInput, jobsUncheckedCreateWithoutShiftsInput>
  }

  export type jobsCreateManyShiftsInputEnvelope = {
    data: Enumerable<jobsCreateManyShiftsInput>
    skipDuplicates?: boolean
  }

  export type jobsUpsertWithWhereUniqueWithoutShiftsInput = {
    where: jobsWhereUniqueInput
    update: XOR<jobsUpdateWithoutShiftsInput, jobsUncheckedUpdateWithoutShiftsInput>
    create: XOR<jobsCreateWithoutShiftsInput, jobsUncheckedCreateWithoutShiftsInput>
  }

  export type jobsUpdateWithWhereUniqueWithoutShiftsInput = {
    where: jobsWhereUniqueInput
    data: XOR<jobsUpdateWithoutShiftsInput, jobsUncheckedUpdateWithoutShiftsInput>
  }

  export type jobsUpdateManyWithWhereWithoutShiftsInput = {
    where: jobsScalarWhereInput
    data: XOR<jobsUpdateManyMutationInput, jobsUncheckedUpdateManyWithoutJobsInput>
  }

  export type shiftsCreateWithoutJobsInput = {
    id?: bigint | number
    start_time: Date | string
    end_time: Date | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    max_volunteers?: number
    work_type?: shifts_work_type
    location: string
    description: string
  }

  export type shiftsUncheckedCreateWithoutJobsInput = {
    id?: bigint | number
    start_time: Date | string
    end_time: Date | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    max_volunteers?: number
    work_type?: shifts_work_type
    location: string
    description: string
  }

  export type shiftsCreateOrConnectWithoutJobsInput = {
    where: shiftsWhereUniqueInput
    create: XOR<shiftsCreateWithoutJobsInput, shiftsUncheckedCreateWithoutJobsInput>
  }

  export type usersCreateWithoutJobsInput = {
    id?: bigint | number
    name: string
    email: string
    email_verified_at?: Date | string | null
    password: string
    phone: string
    address: string
    city: string
    state: string
    country: string
    zip: string
    age: number
    company?: string | null
    employee_id?: string | null
    marketing?: boolean
    user_type?: users_user_type
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type usersUncheckedCreateWithoutJobsInput = {
    id?: bigint | number
    name: string
    email: string
    email_verified_at?: Date | string | null
    password: string
    phone: string
    address: string
    city: string
    state: string
    country: string
    zip: string
    age: number
    company?: string | null
    employee_id?: string | null
    marketing?: boolean
    user_type?: users_user_type
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type usersCreateOrConnectWithoutJobsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutJobsInput, usersUncheckedCreateWithoutJobsInput>
  }

  export type shiftsUpsertWithoutJobsInput = {
    update: XOR<shiftsUpdateWithoutJobsInput, shiftsUncheckedUpdateWithoutJobsInput>
    create: XOR<shiftsCreateWithoutJobsInput, shiftsUncheckedCreateWithoutJobsInput>
  }

  export type shiftsUpdateWithoutJobsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    max_volunteers?: IntFieldUpdateOperationsInput | number
    work_type?: Enumshifts_work_typeFieldUpdateOperationsInput | shifts_work_type
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type shiftsUncheckedUpdateWithoutJobsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    start_time?: DateTimeFieldUpdateOperationsInput | Date | string
    end_time?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    max_volunteers?: IntFieldUpdateOperationsInput | number
    work_type?: Enumshifts_work_typeFieldUpdateOperationsInput | shifts_work_type
    location?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type usersUpsertWithoutJobsInput = {
    update: XOR<usersUpdateWithoutJobsInput, usersUncheckedUpdateWithoutJobsInput>
    create: XOR<usersCreateWithoutJobsInput, usersUncheckedCreateWithoutJobsInput>
  }

  export type usersUpdateWithoutJobsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    company?: NullableStringFieldUpdateOperationsInput | string | null
    employee_id?: NullableStringFieldUpdateOperationsInput | string | null
    marketing?: BoolFieldUpdateOperationsInput | boolean
    user_type?: Enumusers_user_typeFieldUpdateOperationsInput | users_user_type
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersUncheckedUpdateWithoutJobsInput = {
    id?: BigIntFieldUpdateOperationsInput | bigint | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    email_verified_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    password?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    country?: StringFieldUpdateOperationsInput | string
    zip?: StringFieldUpdateOperationsInput | string
    age?: IntFieldUpdateOperationsInput | number
    company?: NullableStringFieldUpdateOperationsInput | string | null
    employee_id?: NullableStringFieldUpdateOperationsInput | string | null
    marketing?: BoolFieldUpdateOperationsInput | boolean
    user_type?: Enumusers_user_typeFieldUpdateOperationsInput | users_user_type
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type jobsCreateManyUsersInput = {
    shift_id: bigint | number
  }

  export type jobsUpdateWithoutUsersInput = {
    shifts?: shiftsUpdateOneRequiredWithoutJobsNestedInput
  }

  export type jobsUncheckedUpdateWithoutUsersInput = {
    shift_id?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type jobsUncheckedUpdateManyWithoutJobsInput = {
    shift_id?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type jobsCreateManyShiftsInput = {
    user_id: bigint | number
  }

  export type jobsUpdateWithoutShiftsInput = {
    users?: usersUpdateOneRequiredWithoutJobsNestedInput
  }

  export type jobsUncheckedUpdateWithoutShiftsInput = {
    user_id?: BigIntFieldUpdateOperationsInput | bigint | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}